import java.util.Iterator;
import java.util.NoSuchElementException;


public class AdjancencyMatrix {
	private int numberOfVertices;
	private int numberOfEdges;
	private int[][] adjancencyMatrix;
	
	public AdjancencyMatrix(int numberOfVertices) {
		if (numberOfVertices < 0) throw new RuntimeException("Number of vertices must be nonnegative");
		this.setNumberOfVertices(numberOfVertices);
		this.setNumberOfEdges(0);
		this.adjancencyMatrix = new int[numberOfVertices][numberOfVertices];
	}

	public int getNumberOfVertices() { return numberOfVertices;	}
	public int getNumberOfEdges() { return numberOfEdges; }
	
	private void setNumberOfVertices(int numberOfVertices) {
		this.numberOfVertices = numberOfVertices;
	}

	private void setNumberOfEdges(int numberOfEdges) {
		this.numberOfEdges = numberOfEdges;
	}
	
	public void addEdge(int vertexA, int vertexB, int edgeWeight) {
		if (adjancencyMatrix[vertexA][vertexB] == 0) numberOfEdges++;
		adjancencyMatrix[vertexA][vertexB] = edgeWeight;
		adjancencyMatrix[vertexB][vertexA] = edgeWeight;
	}
	
	public Iterable<Integer> adjancencyMatrix(int v) {
        return new AdjancencyMatrixIterator(v);
    }

    // support iteration over graph vertices
    private class AdjancencyMatrixIterator implements Iterator<Integer>, Iterable<Integer> {
        int v, w = 0;
        AdjancencyMatrixIterator(int v) { this.v = v; }

        public Iterator<Integer> iterator() { return this; }

        public boolean hasNext()
        {
            while (w < numberOfVertices) {
                if (adjancencyMatrix[v][w] != 0) {
                	return true;
                }
                w++;
            }
            return false;
        }

        public Integer next()
        {
            if (hasNext()) { 
            	return w++;                        
            } else { 
            	throw new NoSuchElementException(); 
            }
        }

        public void remove() 
        { 
        	throw new UnsupportedOperationException();  
        }
    }
	
	public String toString() {
        String NEWLINE = System.getProperty("line.separator");
        StringBuilder s = new StringBuilder();
        s.append(numberOfVertices + " " + numberOfEdges + NEWLINE);
        for (int v = 0; v < numberOfVertices; v++) {
            s.append(v + ": ");
            for (int w : adjancencyMatrix(v)) {
                s.append(w + " ");
            }
            s.append(NEWLINE);
        }
        return s.toString();
    }
}
